#include <iostream>
#include <unordered_map>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

using Graph = unordered_map<int, vector<pair<int, int>>>; // node -> list of (neighbor, weight)

int dijkstra(const Graph& graph, int start, int end) {
    unordered_map<int, int> distance;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> minHeap;

    for (const auto& [node, _] : graph) {
        distance[node] = INT_MAX;
    }
    distance[start] = 0;
    minHeap.push({0, start});

    while (!minHeap.empty()) {
        auto [dist, curr] = minHeap.top();
        minHeap.pop();

        if (curr == end) return dist;

        if (!graph.count(curr)) continue;

        for (const auto& [neighbor, weight] : graph.at(curr)) {
            int newDist = dist + weight;
            if (newDist < distance[neighbor]) {
                distance[neighbor] = newDist;
                minHeap.push({newDist, neighbor});
            }
        }
    }

    return -1; // unreachable
}

int main() {
    Graph graph = {
        {1, {{2, 1}, {5, 1}, {3, 1}}},
        {2, {{4, 1}}},
        {3, {{5, 1}}},
        {4, {{3, 1}}},
        {5, {}}
    };

    vector<pair<int, int>> queries = {{1, 2}, {1, 5}, {2, 5}, {5, 1}, {2, 1}};
    for (auto [from, to] : queries) {
        int res = dijkstra(graph, from, to);
        cout << "Shortest path from " << from << " to " << to << ": ";
        if (res == -1) cout << "unreachable\n";
        else cout << res << "\n";
    }

    return 0;
}
